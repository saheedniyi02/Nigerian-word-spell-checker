# -*- coding: utf-8 -*-
"""Spell Checker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sQWU1Ciu2XWSVrUInX6LM6DuBm3-qCzg

** split_words split words into two for example 



```
"word" : [("",word),("w","ord"),("wo","rd"),("wor","d"),("word","")]
```


deletes: deletes one letter from the second term in the tuples (in the split_words) and adds it to the first, delete reduces the word by 1 by removing one letter, and if the seconnd one is empty, ignores the word. gives list of words with len(word)-1

insert: insert a word between the first and second item in the split_words,gives list of words with len(word)+1

replaces:replaces one letter from the second term in the tuples (in the split_words) and adds it to the first, delete reduces the word by 1 by removing one letter, and if the seconnd one is empty, ignores the word. gives list of words with len(word). 

transposes:interchanges the positin of a leter  **
"""

import re
from collections import Counter

def edit_once(word):
    "All edits that are one edit away from `word`."
    letters    = 'abcdefghijklmnopqrstuvwxyz'
    split_words     = [(word[:i], word[i:])    for i in range(len(word) + 1)]
    deletes    = [L + R[1:]               for L, R in split_words if R]
    transposes = [L + R[1] + R[0] + R[2:] for L, R in split_words if len(R)>1]
    replaces   = [L + c + R[1:]           for L, R in split_words if R for c in letters]
    inserts    = [L + c + R               for L, R in split_words for c in letters]
    return set(deletes + transposes + replaces + inserts)

def edit_twice(word):
  return (edit2 for edit1 in edit_once(word) for edit2 in edit_once(edit1))

def words(text):
  return re.findall(r'\w+', text.lower())

WORDS = Counter(words(open('/content/drive/MyDrive/Spell checker/vocabulary.txt').read()))

#returns the count of a word
def P(word, N=sum(WORDS.values())):
  return WORDS[word] / N

WORDS.most_common(100)

#returns only words in our vocabulaty
def known(words):
  return set(w for w in words if w in WORDS)

def candidates(word):
  print(known([word])or known(edit_once(word)) or known(edit_twice(word)) or [word])
  return known([word])or known(edit_once(word)) or known(edit_twice(word)) or [word]

def correction(word):
  return max(candidates(word), key=P)

correction("aisht")

